//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-30411180
// Cuda compilation tools, release 11.5, V11.5.50
// Based on NVVM 7.0.1
//

.version 7.5
.target sm_52
.address_size 64

	// .globl	_Z16streamcompactionPdS_iPVjd
// _ZZ13dynamic_wg_idPVjiE4gid_ has been demoted
// _ZZ24block_binary_prefix_sumsPiiE5sdata has been demoted
// _ZZ16streamcompactionPdS_iPVjdE5count has been demoted
// _ZZ9reductionIiEvPT_S0_E5sdata has been demoted

.visible .entry _Z16streamcompactionPdS_iPVjd(
	.param .u64 _Z16streamcompactionPdS_iPVjd_param_0,
	.param .u64 _Z16streamcompactionPdS_iPVjd_param_1,
	.param .u32 _Z16streamcompactionPdS_iPVjd_param_2,
	.param .u64 _Z16streamcompactionPdS_iPVjd_param_3,
	.param .f64 _Z16streamcompactionPdS_iPVjd_param_4
)
{
	.reg .pred 	%p<91>;
	.reg .b32 	%r<345>;
	.reg .f64 	%fd<26>;
	.reg .b64 	%rd<43>;
	// demoted variable
	.shared .align 4 .u32 _ZZ13dynamic_wg_idPVjiE4gid_;
	// demoted variable
	.shared .align 4 .b8 _ZZ24block_binary_prefix_sumsPiiE5sdata[4096];
	// demoted variable
	.shared .align 4 .u32 _ZZ16streamcompactionPdS_iPVjdE5count;
	// demoted variable
	.shared .align 4 .b8 _ZZ9reductionIiEvPT_S0_E5sdata[4096];

	ld.param.u64 	%rd5, [_Z16streamcompactionPdS_iPVjd_param_0];
	ld.param.u64 	%rd6, [_Z16streamcompactionPdS_iPVjd_param_1];
	ld.param.u32 	%r95, [_Z16streamcompactionPdS_iPVjd_param_2];
	ld.param.u64 	%rd7, [_Z16streamcompactionPdS_iPVjd_param_3];
	ld.param.f64 	%fd17, [_Z16streamcompactionPdS_iPVjd_param_4];
	cvta.to.global.u64 	%rd1, %rd6;
	cvta.to.global.u64 	%rd2, %rd5;
	cvta.to.global.u64 	%rd3, %rd7;
	mov.u32 	%r1, %ntid.x;
	shl.b32 	%r2, %r1, 3;
	mov.u32 	%r3, %tid.x;
	setp.ne.s32 	%p1, %r3, 0;
	@%p1 bra 	$L__BB0_2;

	div.u32 	%r96, %r95, %r2;
	mul.lo.s32 	%r97, %r96, %r2;
	sub.s32 	%r98, %r95, %r97;
	setp.ne.s32 	%p2, %r98, 0;
	mov.u32 	%r99, 0;
	selp.u32 	%r100, 1, 0, %p2;
	st.shared.u32 	[_ZZ16streamcompactionPdS_iPVjdE5count], %r99;
	add.s32 	%r101, %r96, %r100;
	add.s32 	%r102, %r101, 1;
	mul.wide.s32 	%rd8, %r102, 4;
	add.s64 	%rd9, %rd3, %rd8;
	atom.global.add.u32 	%r103, [%rd9], 1;
	st.shared.u32 	[_ZZ13dynamic_wg_idPVjiE4gid_], %r103;

$L__BB0_2:
	bar.sync 	0;
	ld.shared.u32 	%r4, [_ZZ13dynamic_wg_idPVjiE4gid_];
	mov.u32 	%r328, 0;
	mad.lo.s32 	%r5, %r2, %r4, %r3;
	setp.ge.s32 	%p3, %r5, %r95;
	mov.f64 	%fd18, %fd17;
	@%p3 bra 	$L__BB0_4;

	mul.wide.s32 	%rd10, %r5, 8;
	add.s64 	%rd11, %rd1, %rd10;
	ld.global.f64 	%fd18, [%rd11];
	setp.neu.f64 	%p4, %fd18, %fd17;
	selp.u32 	%r328, 1, 0, %p4;

$L__BB0_4:
	add.s32 	%r8, %r5, %r1;
	setp.ge.s32 	%p5, %r8, %r95;
	mov.f64 	%fd19, %fd17;
	@%p5 bra 	$L__BB0_6;

	mul.wide.s32 	%rd12, %r8, 8;
	add.s64 	%rd13, %rd1, %rd12;
	ld.global.f64 	%fd19, [%rd13];
	setp.neu.f64 	%p6, %fd19, %fd17;
	selp.u32 	%r105, 1, 0, %p6;
	add.s32 	%r328, %r328, %r105;

$L__BB0_6:
	add.s32 	%r11, %r8, %r1;
	setp.ge.s32 	%p7, %r11, %r95;
	mov.f64 	%fd20, %fd17;
	@%p7 bra 	$L__BB0_8;

	mul.wide.s32 	%rd14, %r11, 8;
	add.s64 	%rd15, %rd1, %rd14;
	ld.global.f64 	%fd20, [%rd15];
	setp.neu.f64 	%p8, %fd20, %fd17;
	selp.u32 	%r106, 1, 0, %p8;
	add.s32 	%r328, %r328, %r106;

$L__BB0_8:
	add.s32 	%r14, %r11, %r1;
	setp.ge.s32 	%p9, %r14, %r95;
	mov.f64 	%fd21, %fd17;
	@%p9 bra 	$L__BB0_10;

	mul.wide.s32 	%rd16, %r14, 8;
	add.s64 	%rd17, %rd1, %rd16;
	ld.global.f64 	%fd21, [%rd17];
	setp.neu.f64 	%p10, %fd21, %fd17;
	selp.u32 	%r107, 1, 0, %p10;
	add.s32 	%r328, %r328, %r107;

$L__BB0_10:
	add.s32 	%r17, %r14, %r1;
	setp.ge.s32 	%p11, %r17, %r95;
	mov.f64 	%fd22, %fd17;
	@%p11 bra 	$L__BB0_12;

	mul.wide.s32 	%rd18, %r17, 8;
	add.s64 	%rd19, %rd1, %rd18;
	ld.global.f64 	%fd22, [%rd19];
	setp.neu.f64 	%p12, %fd22, %fd17;
	selp.u32 	%r108, 1, 0, %p12;
	add.s32 	%r328, %r328, %r108;

$L__BB0_12:
	add.s32 	%r20, %r17, %r1;
	setp.ge.s32 	%p13, %r20, %r95;
	mov.f64 	%fd23, %fd17;
	@%p13 bra 	$L__BB0_14;

	mul.wide.s32 	%rd20, %r20, 8;
	add.s64 	%rd21, %rd1, %rd20;
	ld.global.f64 	%fd23, [%rd21];
	setp.neu.f64 	%p14, %fd23, %fd17;
	selp.u32 	%r109, 1, 0, %p14;
	add.s32 	%r328, %r328, %r109;

$L__BB0_14:
	add.s32 	%r23, %r20, %r1;
	setp.ge.s32 	%p15, %r23, %r95;
	mov.f64 	%fd24, %fd17;
	@%p15 bra 	$L__BB0_16;

	mul.wide.s32 	%rd22, %r23, 8;
	add.s64 	%rd23, %rd1, %rd22;
	ld.global.f64 	%fd24, [%rd23];
	setp.neu.f64 	%p16, %fd24, %fd17;
	selp.u32 	%r110, 1, 0, %p16;
	add.s32 	%r328, %r328, %r110;

$L__BB0_16:
	add.s32 	%r26, %r23, %r1;
	setp.ge.s32 	%p17, %r26, %r95;
	mov.f64 	%fd25, %fd17;
	@%p17 bra 	$L__BB0_18;

	mul.wide.s32 	%rd24, %r26, 8;
	add.s64 	%rd25, %rd1, %rd24;
	ld.global.f64 	%fd25, [%rd25];
	setp.neu.f64 	%p18, %fd25, %fd17;
	selp.u32 	%r111, 1, 0, %p18;
	add.s32 	%r328, %r328, %r111;

$L__BB0_18:
	shl.b32 	%r112, %r3, 2;
	mov.u32 	%r113, _ZZ9reductionIiEvPT_S0_E5sdata;
	add.s32 	%r29, %r113, %r112;
	st.shared.u32 	[%r29], %r328;
	bar.sync 	0;
	setp.gt.u32 	%p19, %r3, 511;
	setp.lt.u32 	%p20, %r1, 1024;
	or.pred  	%p21, %p20, %p19;
	@%p21 bra 	$L__BB0_20;

	ld.shared.u32 	%r114, [%r29+2048];
	add.s32 	%r328, %r114, %r328;
	st.shared.u32 	[%r29], %r328;

$L__BB0_20:
	bar.sync 	0;
	setp.gt.u32 	%p22, %r3, 255;
	setp.lt.u32 	%p23, %r1, 512;
	or.pred  	%p24, %p23, %p22;
	@%p24 bra 	$L__BB0_22;

	ld.shared.u32 	%r115, [%r29+1024];
	add.s32 	%r328, %r115, %r328;
	st.shared.u32 	[%r29], %r328;

$L__BB0_22:
	bar.sync 	0;
	setp.gt.u32 	%p25, %r3, 127;
	setp.lt.u32 	%p26, %r1, 256;
	or.pred  	%p27, %p26, %p25;
	@%p27 bra 	$L__BB0_24;

	ld.shared.u32 	%r116, [%r29+512];
	add.s32 	%r328, %r116, %r328;
	st.shared.u32 	[%r29], %r328;

$L__BB0_24:
	bar.sync 	0;
	setp.gt.u32 	%p28, %r3, 63;
	setp.lt.u32 	%p29, %r1, 128;
	or.pred  	%p30, %p29, %p28;
	@%p30 bra 	$L__BB0_26;

	ld.shared.u32 	%r117, [%r29+256];
	add.s32 	%r328, %r117, %r328;
	st.shared.u32 	[%r29], %r328;

$L__BB0_26:
	bar.sync 	0;
	setp.gt.u32 	%p31, %r3, 31;
	setp.lt.u32 	%p32, %r1, 64;
	or.pred  	%p33, %p32, %p31;
	@%p33 bra 	$L__BB0_28;

	ld.shared.u32 	%r118, [%r29+128];
	add.s32 	%r328, %r118, %r328;
	st.shared.u32 	[%r29], %r328;

$L__BB0_28:
	bar.sync 	0;
	setp.gt.u32 	%p34, %r3, 15;
	setp.lt.u32 	%p35, %r1, 32;
	or.pred  	%p36, %p35, %p34;
	@%p36 bra 	$L__BB0_30;

	ld.shared.u32 	%r119, [%r29+64];
	add.s32 	%r328, %r119, %r328;
	st.shared.u32 	[%r29], %r328;

$L__BB0_30:
	bar.sync 	0;
	setp.gt.u32 	%p37, %r3, 7;
	setp.lt.u32 	%p38, %r1, 16;
	or.pred  	%p39, %p38, %p37;
	@%p39 bra 	$L__BB0_32;

	ld.shared.u32 	%r120, [%r29+32];
	add.s32 	%r328, %r120, %r328;
	st.shared.u32 	[%r29], %r328;

$L__BB0_32:
	bar.sync 	0;
	setp.gt.u32 	%p40, %r3, 3;
	setp.lt.u32 	%p41, %r1, 8;
	or.pred  	%p42, %p41, %p40;
	@%p42 bra 	$L__BB0_34;

	ld.shared.u32 	%r121, [%r29+16];
	add.s32 	%r328, %r121, %r328;
	st.shared.u32 	[%r29], %r328;

$L__BB0_34:
	bar.sync 	0;
	setp.gt.u32 	%p43, %r3, 1;
	setp.lt.u32 	%p44, %r1, 4;
	or.pred  	%p45, %p44, %p43;
	@%p45 bra 	$L__BB0_36;

	ld.shared.u32 	%r122, [%r29+8];
	add.s32 	%r328, %r122, %r328;
	st.shared.u32 	[%r29], %r328;

$L__BB0_36:
	bar.sync 	0;
	setp.lt.u32 	%p46, %r1, 2;
	or.pred  	%p48, %p46, %p1;
	@%p48 bra 	$L__BB0_38;

	ld.shared.u32 	%r123, [_ZZ9reductionIiEvPT_S0_E5sdata+4];
	add.s32 	%r328, %r123, %r328;
	st.shared.u32 	[_ZZ9reductionIiEvPT_S0_E5sdata], %r328;

$L__BB0_38:
	bar.sync 	0;
	@%p1 bra 	$L__BB0_42;

	st.shared.u32 	[_ZZ16streamcompactionPdS_iPVjdE5count], %r328;
	mul.wide.s32 	%rd26, %r4, 4;
	add.s64 	%rd4, %rd3, %rd26;

$L__BB0_40:
	ld.volatile.global.u32 	%r124, [%rd4];
	setp.eq.s32 	%p50, %r124, 0;
	@%p50 bra 	$L__BB0_40;

	ld.volatile.global.u32 	%r125, [%rd4];
	add.s32 	%r126, %r328, %r125;
	st.volatile.global.u32 	[%rd4+4], %r126;
	add.s32 	%r127, %r125, -1;
	st.shared.u32 	[_ZZ16streamcompactionPdS_iPVjdE5count], %r127;

$L__BB0_42:
	bar.sync 	0;
	setp.neu.f64 	%p51, %fd18, %fd17;
	selp.u32 	%r129, 1, 0, %p51;
	// begin inline asm
	{ 
	.reg .pred 	%p1; 
	setp.ne.u32 	%p1, %r129, 0; 
	vote.ballot.b32 	%r128, %p1; 
	}
	// end inline asm
	and.b32  	%r51, %r3, 31;
	mov.u32 	%r130, -1;
	shl.b32 	%r131, %r130, %r51;
	not.b32 	%r52, %r131;
	and.b32  	%r132, %r128, %r52;
	popc.b32 	%r53, %r132;
	setp.ne.s32 	%p52, %r51, 31;
	shr.u32 	%r133, %r3, 3;
	and.b32  	%r134, %r133, 536870908;
	mov.u32 	%r135, _ZZ24block_binary_prefix_sumsPiiE5sdata;
	add.s32 	%r54, %r135, %r134;
	@%p52 bra 	$L__BB0_44;

	add.s32 	%r136, %r53, %r129;
	st.shared.u32 	[%r54], %r136;

$L__BB0_44:
	bar.sync 	0;
	add.s32 	%r55, %r135, %r112;
	@%p31 bra 	$L__BB0_46;

	ld.shared.u32 	%r141, [%r55];
	mov.u32 	%r140, 1;
	mov.u32 	%r142, %r141;
	// begin inline asm
	{ .reg .s32 r0; .reg .pred p; shfl.up.b32 r0|p, %r142, %r140, 0x0; @p add.s32 r0, r0, %r142; mov.s32 %r142, r0;}
	// end inline asm
	mov.u32 	%r143, 2;
	// begin inline asm
	{ .reg .s32 r0; .reg .pred p; shfl.up.b32 r0|p, %r142, %r143, 0x0; @p add.s32 r0, r0, %r142; mov.s32 %r142, r0;}
	// end inline asm
	mov.u32 	%r146, 4;
	// begin inline asm
	{ .reg .s32 r0; .reg .pred p; shfl.up.b32 r0|p, %r142, %r146, 0x0; @p add.s32 r0, r0, %r142; mov.s32 %r142, r0;}
	// end inline asm
	mov.u32 	%r149, 8;
	// begin inline asm
	{ .reg .s32 r0; .reg .pred p; shfl.up.b32 r0|p, %r142, %r149, 0x0; @p add.s32 r0, r0, %r142; mov.s32 %r142, r0;}
	// end inline asm
	mov.u32 	%r152, 16;
	// begin inline asm
	{ .reg .s32 r0; .reg .pred p; shfl.up.b32 r0|p, %r142, %r152, 0x0; @p add.s32 r0, r0, %r142; mov.s32 %r142, r0;}
	// end inline asm
	sub.s32 	%r154, %r142, %r141;
	st.shared.u32 	[%r55], %r154;

$L__BB0_46:
	bar.sync 	0;
	ld.shared.u32 	%r155, [%r54];
	add.s32 	%r56, %r155, %r53;
	ld.shared.u32 	%r57, [_ZZ16streamcompactionPdS_iPVjdE5count];
	bar.sync 	0;
	add.s32 	%r58, %r1, -1;
	setp.ne.s32 	%p54, %r3, %r58;
	@%p54 bra 	$L__BB0_48;

	add.s32 	%r156, %r56, %r129;
	ld.shared.u32 	%r157, [_ZZ16streamcompactionPdS_iPVjdE5count];
	add.s32 	%r158, %r156, %r157;
	st.shared.u32 	[_ZZ16streamcompactionPdS_iPVjdE5count], %r158;

$L__BB0_48:
	add.s32 	%r59, %r56, %r57;
	setp.eq.f64 	%p55, %fd18, %fd17;
	@%p55 bra 	$L__BB0_50;

	mul.wide.s32 	%rd27, %r59, 8;
	add.s64 	%rd28, %rd2, %rd27;
	st.global.f64 	[%rd28], %fd18;

$L__BB0_50:
	setp.neu.f64 	%p57, %fd19, %fd17;
	selp.u32 	%r160, 1, 0, %p57;
	// begin inline asm
	{ 
	.reg .pred 	%p1; 
	setp.ne.u32 	%p1, %r160, 0; 
	vote.ballot.b32 	%r159, %p1; 
	}
	// end inline asm
	and.b32  	%r161, %r159, %r52;
	popc.b32 	%r61, %r161;
	@%p52 bra 	$L__BB0_52;

	add.s32 	%r162, %r61, %r160;
	st.shared.u32 	[%r54], %r162;

$L__BB0_52:
	bar.sync 	0;
	@%p31 bra 	$L__BB0_54;

	ld.shared.u32 	%r165, [%r55];
	mov.u32 	%r164, 1;
	mov.u32 	%r166, %r165;
	// begin inline asm
	{ .reg .s32 r0; .reg .pred p; shfl.up.b32 r0|p, %r166, %r164, 0x0; @p add.s32 r0, r0, %r166; mov.s32 %r166, r0;}
	// end inline asm
	mov.u32 	%r167, 2;
	// begin inline asm
	{ .reg .s32 r0; .reg .pred p; shfl.up.b32 r0|p, %r166, %r167, 0x0; @p add.s32 r0, r0, %r166; mov.s32 %r166, r0;}
	// end inline asm
	mov.u32 	%r170, 4;
	// begin inline asm
	{ .reg .s32 r0; .reg .pred p; shfl.up.b32 r0|p, %r166, %r170, 0x0; @p add.s32 r0, r0, %r166; mov.s32 %r166, r0;}
	// end inline asm
	mov.u32 	%r173, 8;
	// begin inline asm
	{ .reg .s32 r0; .reg .pred p; shfl.up.b32 r0|p, %r166, %r173, 0x0; @p add.s32 r0, r0, %r166; mov.s32 %r166, r0;}
	// end inline asm
	mov.u32 	%r176, 16;
	// begin inline asm
	{ .reg .s32 r0; .reg .pred p; shfl.up.b32 r0|p, %r166, %r176, 0x0; @p add.s32 r0, r0, %r166; mov.s32 %r166, r0;}
	// end inline asm
	sub.s32 	%r178, %r166, %r165;
	st.shared.u32 	[%r55], %r178;

$L__BB0_54:
	bar.sync 	0;
	ld.shared.u32 	%r179, [%r54];
	add.s32 	%r62, %r179, %r61;
	ld.shared.u32 	%r63, [_ZZ16streamcompactionPdS_iPVjdE5count];
	bar.sync 	0;
	@%p54 bra 	$L__BB0_56;

	add.s32 	%r180, %r62, %r160;
	ld.shared.u32 	%r181, [_ZZ16streamcompactionPdS_iPVjdE5count];
	add.s32 	%r182, %r180, %r181;
	st.shared.u32 	[_ZZ16streamcompactionPdS_iPVjdE5count], %r182;

$L__BB0_56:
	add.s32 	%r64, %r62, %r63;
	setp.eq.f64 	%p60, %fd19, %fd17;
	@%p60 bra 	$L__BB0_58;

	mul.wide.s32 	%rd29, %r64, 8;
	add.s64 	%rd30, %rd2, %rd29;
	st.global.f64 	[%rd30], %fd19;

$L__BB0_58:
	setp.neu.f64 	%p62, %fd20, %fd17;
	selp.u32 	%r184, 1, 0, %p62;
	// begin inline asm
	{ 
	.reg .pred 	%p1; 
	setp.ne.u32 	%p1, %r184, 0; 
	vote.ballot.b32 	%r183, %p1; 
	}
	// end inline asm
	and.b32  	%r185, %r183, %r52;
	popc.b32 	%r66, %r185;
	@%p52 bra 	$L__BB0_60;

	add.s32 	%r186, %r66, %r184;
	st.shared.u32 	[%r54], %r186;

$L__BB0_60:
	bar.sync 	0;
	@%p31 bra 	$L__BB0_62;

	ld.shared.u32 	%r189, [%r55];
	mov.u32 	%r188, 1;
	mov.u32 	%r190, %r189;
	// begin inline asm
	{ .reg .s32 r0; .reg .pred p; shfl.up.b32 r0|p, %r190, %r188, 0x0; @p add.s32 r0, r0, %r190; mov.s32 %r190, r0;}
	// end inline asm
	mov.u32 	%r191, 2;
	// begin inline asm
	{ .reg .s32 r0; .reg .pred p; shfl.up.b32 r0|p, %r190, %r191, 0x0; @p add.s32 r0, r0, %r190; mov.s32 %r190, r0;}
	// end inline asm
	mov.u32 	%r194, 4;
	// begin inline asm
	{ .reg .s32 r0; .reg .pred p; shfl.up.b32 r0|p, %r190, %r194, 0x0; @p add.s32 r0, r0, %r190; mov.s32 %r190, r0;}
	// end inline asm
	mov.u32 	%r197, 8;
	// begin inline asm
	{ .reg .s32 r0; .reg .pred p; shfl.up.b32 r0|p, %r190, %r197, 0x0; @p add.s32 r0, r0, %r190; mov.s32 %r190, r0;}
	// end inline asm
	mov.u32 	%r200, 16;
	// begin inline asm
	{ .reg .s32 r0; .reg .pred p; shfl.up.b32 r0|p, %r190, %r200, 0x0; @p add.s32 r0, r0, %r190; mov.s32 %r190, r0;}
	// end inline asm
	sub.s32 	%r202, %r190, %r189;
	st.shared.u32 	[%r55], %r202;

$L__BB0_62:
	bar.sync 	0;
	ld.shared.u32 	%r203, [%r54];
	add.s32 	%r67, %r203, %r66;
	ld.shared.u32 	%r68, [_ZZ16streamcompactionPdS_iPVjdE5count];
	bar.sync 	0;
	@%p54 bra 	$L__BB0_64;

	add.s32 	%r204, %r67, %r184;
	ld.shared.u32 	%r205, [_ZZ16streamcompactionPdS_iPVjdE5count];
	add.s32 	%r206, %r204, %r205;
	st.shared.u32 	[_ZZ16streamcompactionPdS_iPVjdE5count], %r206;

$L__BB0_64:
	add.s32 	%r69, %r67, %r68;
	setp.eq.f64 	%p65, %fd20, %fd17;
	@%p65 bra 	$L__BB0_66;

	mul.wide.s32 	%rd31, %r69, 8;
	add.s64 	%rd32, %rd2, %rd31;
	st.global.f64 	[%rd32], %fd20;

$L__BB0_66:
	setp.neu.f64 	%p67, %fd21, %fd17;
	selp.u32 	%r208, 1, 0, %p67;
	// begin inline asm
	{ 
	.reg .pred 	%p1; 
	setp.ne.u32 	%p1, %r208, 0; 
	vote.ballot.b32 	%r207, %p1; 
	}
	// end inline asm
	and.b32  	%r209, %r207, %r52;
	popc.b32 	%r71, %r209;
	@%p52 bra 	$L__BB0_68;

	add.s32 	%r210, %r71, %r208;
	st.shared.u32 	[%r54], %r210;

$L__BB0_68:
	bar.sync 	0;
	@%p31 bra 	$L__BB0_70;

	ld.shared.u32 	%r213, [%r55];
	mov.u32 	%r212, 1;
	mov.u32 	%r214, %r213;
	// begin inline asm
	{ .reg .s32 r0; .reg .pred p; shfl.up.b32 r0|p, %r214, %r212, 0x0; @p add.s32 r0, r0, %r214; mov.s32 %r214, r0;}
	// end inline asm
	mov.u32 	%r215, 2;
	// begin inline asm
	{ .reg .s32 r0; .reg .pred p; shfl.up.b32 r0|p, %r214, %r215, 0x0; @p add.s32 r0, r0, %r214; mov.s32 %r214, r0;}
	// end inline asm
	mov.u32 	%r218, 4;
	// begin inline asm
	{ .reg .s32 r0; .reg .pred p; shfl.up.b32 r0|p, %r214, %r218, 0x0; @p add.s32 r0, r0, %r214; mov.s32 %r214, r0;}
	// end inline asm
	mov.u32 	%r221, 8;
	// begin inline asm
	{ .reg .s32 r0; .reg .pred p; shfl.up.b32 r0|p, %r214, %r221, 0x0; @p add.s32 r0, r0, %r214; mov.s32 %r214, r0;}
	// end inline asm
	mov.u32 	%r224, 16;
	// begin inline asm
	{ .reg .s32 r0; .reg .pred p; shfl.up.b32 r0|p, %r214, %r224, 0x0; @p add.s32 r0, r0, %r214; mov.s32 %r214, r0;}
	// end inline asm
	sub.s32 	%r226, %r214, %r213;
	st.shared.u32 	[%r55], %r226;

$L__BB0_70:
	bar.sync 	0;
	ld.shared.u32 	%r227, [%r54];
	add.s32 	%r72, %r227, %r71;
	ld.shared.u32 	%r73, [_ZZ16streamcompactionPdS_iPVjdE5count];
	bar.sync 	0;
	@%p54 bra 	$L__BB0_72;

	add.s32 	%r228, %r72, %r208;
	ld.shared.u32 	%r229, [_ZZ16streamcompactionPdS_iPVjdE5count];
	add.s32 	%r230, %r228, %r229;
	st.shared.u32 	[_ZZ16streamcompactionPdS_iPVjdE5count], %r230;

$L__BB0_72:
	add.s32 	%r74, %r72, %r73;
	setp.eq.f64 	%p70, %fd21, %fd17;
	@%p70 bra 	$L__BB0_74;

	mul.wide.s32 	%rd33, %r74, 8;
	add.s64 	%rd34, %rd2, %rd33;
	st.global.f64 	[%rd34], %fd21;

$L__BB0_74:
	setp.neu.f64 	%p72, %fd22, %fd17;
	selp.u32 	%r232, 1, 0, %p72;
	// begin inline asm
	{ 
	.reg .pred 	%p1; 
	setp.ne.u32 	%p1, %r232, 0; 
	vote.ballot.b32 	%r231, %p1; 
	}
	// end inline asm
	and.b32  	%r233, %r231, %r52;
	popc.b32 	%r76, %r233;
	@%p52 bra 	$L__BB0_76;

	add.s32 	%r234, %r76, %r232;
	st.shared.u32 	[%r54], %r234;

$L__BB0_76:
	bar.sync 	0;
	@%p31 bra 	$L__BB0_78;

	ld.shared.u32 	%r237, [%r55];
	mov.u32 	%r236, 1;
	mov.u32 	%r238, %r237;
	// begin inline asm
	{ .reg .s32 r0; .reg .pred p; shfl.up.b32 r0|p, %r238, %r236, 0x0; @p add.s32 r0, r0, %r238; mov.s32 %r238, r0;}
	// end inline asm
	mov.u32 	%r239, 2;
	// begin inline asm
	{ .reg .s32 r0; .reg .pred p; shfl.up.b32 r0|p, %r238, %r239, 0x0; @p add.s32 r0, r0, %r238; mov.s32 %r238, r0;}
	// end inline asm
	mov.u32 	%r242, 4;
	// begin inline asm
	{ .reg .s32 r0; .reg .pred p; shfl.up.b32 r0|p, %r238, %r242, 0x0; @p add.s32 r0, r0, %r238; mov.s32 %r238, r0;}
	// end inline asm
	mov.u32 	%r245, 8;
	// begin inline asm
	{ .reg .s32 r0; .reg .pred p; shfl.up.b32 r0|p, %r238, %r245, 0x0; @p add.s32 r0, r0, %r238; mov.s32 %r238, r0;}
	// end inline asm
	mov.u32 	%r248, 16;
	// begin inline asm
	{ .reg .s32 r0; .reg .pred p; shfl.up.b32 r0|p, %r238, %r248, 0x0; @p add.s32 r0, r0, %r238; mov.s32 %r238, r0;}
	// end inline asm
	sub.s32 	%r250, %r238, %r237;
	st.shared.u32 	[%r55], %r250;

$L__BB0_78:
	bar.sync 	0;
	ld.shared.u32 	%r251, [%r54];
	add.s32 	%r77, %r251, %r76;
	ld.shared.u32 	%r78, [_ZZ16streamcompactionPdS_iPVjdE5count];
	bar.sync 	0;
	@%p54 bra 	$L__BB0_80;

	add.s32 	%r252, %r77, %r232;
	ld.shared.u32 	%r253, [_ZZ16streamcompactionPdS_iPVjdE5count];
	add.s32 	%r254, %r252, %r253;
	st.shared.u32 	[_ZZ16streamcompactionPdS_iPVjdE5count], %r254;

$L__BB0_80:
	add.s32 	%r79, %r77, %r78;
	setp.eq.f64 	%p75, %fd22, %fd17;
	@%p75 bra 	$L__BB0_82;

	mul.wide.s32 	%rd35, %r79, 8;
	add.s64 	%rd36, %rd2, %rd35;
	st.global.f64 	[%rd36], %fd22;

$L__BB0_82:
	setp.neu.f64 	%p77, %fd23, %fd17;
	selp.u32 	%r256, 1, 0, %p77;
	// begin inline asm
	{ 
	.reg .pred 	%p1; 
	setp.ne.u32 	%p1, %r256, 0; 
	vote.ballot.b32 	%r255, %p1; 
	}
	// end inline asm
	and.b32  	%r257, %r255, %r52;
	popc.b32 	%r81, %r257;
	@%p52 bra 	$L__BB0_84;

	add.s32 	%r258, %r81, %r256;
	st.shared.u32 	[%r54], %r258;

$L__BB0_84:
	bar.sync 	0;
	@%p31 bra 	$L__BB0_86;

	ld.shared.u32 	%r261, [%r55];
	mov.u32 	%r260, 1;
	mov.u32 	%r262, %r261;
	// begin inline asm
	{ .reg .s32 r0; .reg .pred p; shfl.up.b32 r0|p, %r262, %r260, 0x0; @p add.s32 r0, r0, %r262; mov.s32 %r262, r0;}
	// end inline asm
	mov.u32 	%r263, 2;
	// begin inline asm
	{ .reg .s32 r0; .reg .pred p; shfl.up.b32 r0|p, %r262, %r263, 0x0; @p add.s32 r0, r0, %r262; mov.s32 %r262, r0;}
	// end inline asm
	mov.u32 	%r266, 4;
	// begin inline asm
	{ .reg .s32 r0; .reg .pred p; shfl.up.b32 r0|p, %r262, %r266, 0x0; @p add.s32 r0, r0, %r262; mov.s32 %r262, r0;}
	// end inline asm
	mov.u32 	%r269, 8;
	// begin inline asm
	{ .reg .s32 r0; .reg .pred p; shfl.up.b32 r0|p, %r262, %r269, 0x0; @p add.s32 r0, r0, %r262; mov.s32 %r262, r0;}
	// end inline asm
	mov.u32 	%r272, 16;
	// begin inline asm
	{ .reg .s32 r0; .reg .pred p; shfl.up.b32 r0|p, %r262, %r272, 0x0; @p add.s32 r0, r0, %r262; mov.s32 %r262, r0;}
	// end inline asm
	sub.s32 	%r274, %r262, %r261;
	st.shared.u32 	[%r55], %r274;

$L__BB0_86:
	bar.sync 	0;
	ld.shared.u32 	%r275, [%r54];
	add.s32 	%r82, %r275, %r81;
	ld.shared.u32 	%r83, [_ZZ16streamcompactionPdS_iPVjdE5count];
	bar.sync 	0;
	@%p54 bra 	$L__BB0_88;

	add.s32 	%r276, %r82, %r256;
	ld.shared.u32 	%r277, [_ZZ16streamcompactionPdS_iPVjdE5count];
	add.s32 	%r278, %r276, %r277;
	st.shared.u32 	[_ZZ16streamcompactionPdS_iPVjdE5count], %r278;

$L__BB0_88:
	add.s32 	%r84, %r82, %r83;
	setp.eq.f64 	%p80, %fd23, %fd17;
	@%p80 bra 	$L__BB0_90;

	mul.wide.s32 	%rd37, %r84, 8;
	add.s64 	%rd38, %rd2, %rd37;
	st.global.f64 	[%rd38], %fd23;

$L__BB0_90:
	setp.neu.f64 	%p82, %fd24, %fd17;
	selp.u32 	%r280, 1, 0, %p82;
	// begin inline asm
	{ 
	.reg .pred 	%p1; 
	setp.ne.u32 	%p1, %r280, 0; 
	vote.ballot.b32 	%r279, %p1; 
	}
	// end inline asm
	and.b32  	%r281, %r279, %r52;
	popc.b32 	%r86, %r281;
	@%p52 bra 	$L__BB0_92;

	add.s32 	%r282, %r86, %r280;
	st.shared.u32 	[%r54], %r282;

$L__BB0_92:
	bar.sync 	0;
	@%p31 bra 	$L__BB0_94;

	ld.shared.u32 	%r285, [%r55];
	mov.u32 	%r284, 1;
	mov.u32 	%r286, %r285;
	// begin inline asm
	{ .reg .s32 r0; .reg .pred p; shfl.up.b32 r0|p, %r286, %r284, 0x0; @p add.s32 r0, r0, %r286; mov.s32 %r286, r0;}
	// end inline asm
	mov.u32 	%r287, 2;
	// begin inline asm
	{ .reg .s32 r0; .reg .pred p; shfl.up.b32 r0|p, %r286, %r287, 0x0; @p add.s32 r0, r0, %r286; mov.s32 %r286, r0;}
	// end inline asm
	mov.u32 	%r290, 4;
	// begin inline asm
	{ .reg .s32 r0; .reg .pred p; shfl.up.b32 r0|p, %r286, %r290, 0x0; @p add.s32 r0, r0, %r286; mov.s32 %r286, r0;}
	// end inline asm
	mov.u32 	%r293, 8;
	// begin inline asm
	{ .reg .s32 r0; .reg .pred p; shfl.up.b32 r0|p, %r286, %r293, 0x0; @p add.s32 r0, r0, %r286; mov.s32 %r286, r0;}
	// end inline asm
	mov.u32 	%r296, 16;
	// begin inline asm
	{ .reg .s32 r0; .reg .pred p; shfl.up.b32 r0|p, %r286, %r296, 0x0; @p add.s32 r0, r0, %r286; mov.s32 %r286, r0;}
	// end inline asm
	sub.s32 	%r298, %r286, %r285;
	st.shared.u32 	[%r55], %r298;

$L__BB0_94:
	bar.sync 	0;
	ld.shared.u32 	%r299, [%r54];
	add.s32 	%r87, %r299, %r86;
	ld.shared.u32 	%r88, [_ZZ16streamcompactionPdS_iPVjdE5count];
	bar.sync 	0;
	@%p54 bra 	$L__BB0_96;

	add.s32 	%r300, %r87, %r280;
	ld.shared.u32 	%r301, [_ZZ16streamcompactionPdS_iPVjdE5count];
	add.s32 	%r302, %r300, %r301;
	st.shared.u32 	[_ZZ16streamcompactionPdS_iPVjdE5count], %r302;

$L__BB0_96:
	add.s32 	%r89, %r87, %r88;
	setp.eq.f64 	%p85, %fd24, %fd17;
	@%p85 bra 	$L__BB0_98;

	mul.wide.s32 	%rd39, %r89, 8;
	add.s64 	%rd40, %rd2, %rd39;
	st.global.f64 	[%rd40], %fd24;

$L__BB0_98:
	setp.neu.f64 	%p87, %fd25, %fd17;
	selp.u32 	%r304, 1, 0, %p87;
	// begin inline asm
	{ 
	.reg .pred 	%p1; 
	setp.ne.u32 	%p1, %r304, 0; 
	vote.ballot.b32 	%r303, %p1; 
	}
	// end inline asm
	and.b32  	%r305, %r303, %r52;
	popc.b32 	%r91, %r305;
	@%p52 bra 	$L__BB0_100;

	add.s32 	%r306, %r91, %r304;
	st.shared.u32 	[%r54], %r306;

$L__BB0_100:
	bar.sync 	0;
	@%p31 bra 	$L__BB0_102;

	ld.shared.u32 	%r309, [%r55];
	mov.u32 	%r308, 1;
	mov.u32 	%r310, %r309;
	// begin inline asm
	{ .reg .s32 r0; .reg .pred p; shfl.up.b32 r0|p, %r310, %r308, 0x0; @p add.s32 r0, r0, %r310; mov.s32 %r310, r0;}
	// end inline asm
	mov.u32 	%r311, 2;
	// begin inline asm
	{ .reg .s32 r0; .reg .pred p; shfl.up.b32 r0|p, %r310, %r311, 0x0; @p add.s32 r0, r0, %r310; mov.s32 %r310, r0;}
	// end inline asm
	mov.u32 	%r314, 4;
	// begin inline asm
	{ .reg .s32 r0; .reg .pred p; shfl.up.b32 r0|p, %r310, %r314, 0x0; @p add.s32 r0, r0, %r310; mov.s32 %r310, r0;}
	// end inline asm
	mov.u32 	%r317, 8;
	// begin inline asm
	{ .reg .s32 r0; .reg .pred p; shfl.up.b32 r0|p, %r310, %r317, 0x0; @p add.s32 r0, r0, %r310; mov.s32 %r310, r0;}
	// end inline asm
	mov.u32 	%r320, 16;
	// begin inline asm
	{ .reg .s32 r0; .reg .pred p; shfl.up.b32 r0|p, %r310, %r320, 0x0; @p add.s32 r0, r0, %r310; mov.s32 %r310, r0;}
	// end inline asm
	sub.s32 	%r322, %r310, %r309;
	st.shared.u32 	[%r55], %r322;

$L__BB0_102:
	bar.sync 	0;
	ld.shared.u32 	%r323, [%r54];
	add.s32 	%r92, %r323, %r91;
	ld.shared.u32 	%r93, [_ZZ16streamcompactionPdS_iPVjdE5count];
	bar.sync 	0;
	@%p54 bra 	$L__BB0_104;

	add.s32 	%r324, %r92, %r304;
	ld.shared.u32 	%r325, [_ZZ16streamcompactionPdS_iPVjdE5count];
	add.s32 	%r326, %r324, %r325;
	st.shared.u32 	[_ZZ16streamcompactionPdS_iPVjdE5count], %r326;

$L__BB0_104:
	add.s32 	%r94, %r92, %r93;
	setp.eq.f64 	%p90, %fd25, %fd17;
	@%p90 bra 	$L__BB0_106;

	mul.wide.s32 	%rd41, %r94, 8;
	add.s64 	%rd42, %rd2, %rd41;
	st.global.f64 	[%rd42], %fd25;

$L__BB0_106:
	ret;

}

